#!/usr/bin/python
#
# Python script to enqueue an event from Nagios to send to PagerDuty.
#
# Copyright (c) 2013-2014, PagerDuty, Inc. <info@pagerduty.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

def main():
    from pdagent.config import load_agent_config

    description = "Enqueue an event from Nagios to PagerDuty."
    parser = build_queue_arg_parser(description)
    args = parser.parse_args()
    details = parse_fields(args.fields)

    event_type = {
        "PROBLEM": "trigger",
        "ACKNOWLEDGEMENT": "acknowledge",
        "RECOVERY": "resolve",
        "NOP": "nop"
    }[args.event_type]

    from pdagent.pdagentutil import queue_event

    event_description = "TODO: figure out event description"

    # ensure that required fields are provided for the notification_type
    # these fields are displayed on Nagios services in PD as well as used
    # for determining the incident key

    if not required_fields(args.notification_type).issubset(details.keys()):
        error_message = "Missing fields for type '{0}'.  {1} required".format(
            args.notification_type,
            ", ".join(required_fields(args.notification_type))
            )
        parser.error(error_message)

    # allow the user to provide an incident key, or calculate one
    if args.incident_key is None:
        incident_key = calculated_incident_key(args, details)
    else:
        incident_key = args.incident_key

    agent_config = load_agent_config()

    incident_key = queue_event(
        agent_config.get_enqueuer(),
        event_type, args.service_key, incident_key, event_description,
        details,
        agent_config.get_agent_id(), "pd-send",
        )
    print "Event processed. Incident Key:", incident_key

def build_queue_arg_parser(description):
    from pdagent.thirdparty.argparse import ArgumentParser
    parser = ArgumentParser(description=description)
    parser.add_argument(
        "-k",
        "--service-key",
        dest="service_key",
        required=True,
        help="Service API Key")
    parser.add_argument(
        "-t",
        "--event-type",
        dest="event_type",
        required=True,
        help="Event type",
        choices=["PROBLEM", "ACKNOWLEDGEMENT", "RECOVERY", "NOP"])
    parser.add_argument(
        "-i",
        "--incident-key",
        dest="incident_key",
        help="Incident Key"),
    parser.add_argument(
        "-f",
        "--field",
        action="append",
        dest="fields",
        help="Add given KEY=VALUE pair to the event details")
    parser.add_argument(
        "-n",
        "--notification-type",
        dest="notification_type",
        required=True,
        help="Nagios notification type (host or service)",
        choices=["service", "host"])
    return parser

def required_fields(notification_type):
    return {
        "host": set(["HOSTNAME","HOSTSTATE"]),
        "service": set(["HOSTNAME", "SERVICEDESC","SERVICESTATE"])
    }[notification_type]

def parse_fields(fields):
    if fields is None:
        return {}
    return dict(f.split("=", 2) for f in fields)

def calculated_incident_key(args, details):
    notification_type = args.notification_type

    if notification_type == "service":
        return "event_source=service;host_name={0};service_desc={1}".format(
            details["HOSTNAME"],
            details["SERVICEDESC"]
        )
    elif notification_type == "host":
        return "event_source=host;host_name={0}".format(details["HOSTNAME"])
    else:
        return None

if __name__ == "__main__":
    try:
        import pdagent.config
    except ImportError:
        # Fix up for dev layout
        import sys
        from os.path import realpath, dirname
        sys.path.append(dirname(dirname(realpath(__file__))))
        import pdagent.config
    main()